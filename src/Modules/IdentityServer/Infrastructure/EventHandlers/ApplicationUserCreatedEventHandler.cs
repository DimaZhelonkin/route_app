using Ardalis.GuardClauses;
using Ark.IdentityServer.Application.Contracts;
using Ark.IdentityServer.Domain.ApplicationUser;
using Ark.IdentityServer.Domain.ApplicationUser.Events;
using Ark.IdentityServer.Domain.ApplicationUser.Specifications;
using Ark.IdentityServer.DomainServices.Repositories;
using Ark.SharedLib.Domain.EventHandlers;
using Keycloak.AuthServices.Sdk.Admin.Models;

namespace Ark.IdentityServer.Infrastructure.EventHandlers;

public class ApplicationUserCreatedEventHandler : IDomainEventHandler<ApplicationUserCreatedEvent>
{
    private readonly IApplicationUserRepository _applicationUserRepository;
    private readonly IUserService _userService;

    public ApplicationUserCreatedEventHandler(IUserService userService,
        IApplicationUserRepository applicationUserRepository)
    {
        _userService = userService;
        _applicationUserRepository = applicationUserRepository;
    }

    #region IDomainEventHandler<ApplicationUserCreatedEvent> Members

    public async Task Handle(ApplicationUserCreatedEvent @event, CancellationToken cancellationToken)
    {
        var specification = new GetApplicationUserByIdSpec(@event.AggregateId);
        var applicationUser = await _applicationUserRepository.FirstOrDefaultAsync(specification, cancellationToken);
        if (applicationUser is null)
            throw new NotFoundException(@event.AggregateId.ToString(), nameof(applicationUser));
        var credentials = new Credential[]
        {
            new()
            {
                Type = "password",
                Value = applicationUser.Password,
                Temporary = false,
            },
        };
        var user = new User
        {
            FirstName = applicationUser.FirstName,
            LastName = applicationUser.LastName,
            Email = applicationUser.Email,
            Username = applicationUser.Username,
            Credentials = credentials,
            Enabled = applicationUser.IsActive,
        };
        await _userService.CreateUser(user);
        // TODO get generated by keycloak user Id 
        var userId = Guid.NewGuid().ToString();
        applicationUser.IdentityId = new IdentityId(userId);
        await _applicationUserRepository.UpdateAsync(applicationUser, cancellationToken);
        await _applicationUserRepository.UnitOfWork.SaveChangesAsync(cancellationToken);
    }

    #endregion
}